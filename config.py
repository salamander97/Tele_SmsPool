import os
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()


class Config:
    # Telegram Bot
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

    # SMSPool API
    SMSPOOL_BASE_URL = os.getenv('SMSPOOL_API_BASE', 'https://api.smspool.net')

    # Bot Settings
    MONITORING_INTERVAL = int(os.getenv('MONITORING_INTERVAL', 30))
    SMS_TIMEOUT = int(os.getenv('SMS_TIMEOUT', 600))
    MAX_RETRIES = int(os.getenv('MAX_RETRIES', 3))

    # Database
    DATABASE_PATH = os.getenv('DATABASE_PATH', 'users.db')

    # Logging
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FILE = os.getenv('LOG_FILE', 'logs/bot.log')
    DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

    # SMSPool Service Configuration
    TARGET_COUNTRY = "jp"  # Japan
    TARGET_SERVICE = "pokemon"  # Pokemon GO

    # Messages
    WELCOME_MESSAGE = """
ü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi SMS Pool Bot!

Bot n√†y gi√∫p b·∫°n thu√™ s·ªë ƒëi·ªán tho·∫°i Nh·∫≠t B·∫£n ƒë·ªÉ nh·∫≠n SMS.

ƒê·ªÉ b·∫Øt ƒë·∫ßu, vui l√≤ng g·ª≠i API key c·ªßa b·∫°n t·ª´ SMSPool.net
    """

    HELP_MESSAGE = """
üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:

1Ô∏è‚É£ G·ª≠i API key SMSPool ƒë·ªÉ ƒëƒÉng nh·∫≠p
2Ô∏è‚É£ Bot s·∫Ω t·ª± ƒë·ªông theo d√µi s·ªë JP Pokemon c√≥ s·∫µn
3Ô∏è‚É£ Khi c√≥ s·ªë, b·∫°n s·∫Ω nh·∫≠n th√¥ng b√°o
4Ô∏è‚É£ Ch·ªçn "Thu√™ s·ªë" ƒë·ªÉ thu√™ s·ªë ƒëi·ªán tho·∫°i
5Ô∏è‚É£ Ch·ªù SMS ƒë·∫øn trong v√≤ng 10 ph√∫t
6Ô∏è‚É£ N·∫øu kh√¥ng c√≥ SMS, bot t·ª± ƒë·ªông ho√†n ti·ªÅn

Commands:
/start - B·∫Øt ƒë·∫ßu
/help - H∆∞·ªõng d·∫´n  
/balance - Ki·ªÉm tra s·ªë d∆∞
/orders - Xem ƒë∆°n h√†ng ƒëang active
    """


# Setup logging
def setup_logging():
    # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
    os.makedirs('logs', exist_ok=True)

    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # Configure root logger
    logging.basicConfig(
        level=getattr(logging, Config.LOG_LEVEL),
        format=log_format,
        handlers=[
            logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

    # Disable some noisy loggers
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)

    return logging.getLogger(__name__)


# Validate configuration
def validate_config():
    errors = []

    if not Config.TELEGRAM_BOT_TOKEN:
        errors.append("TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

    if not Config.SMSPOOL_BASE_URL:
        errors.append("SMSPOOL_API_BASE kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

    if errors:
        for error in errors:
            print(f"‚ùå L·ªói c·∫•u h√¨nh: {error}")
        return False

    return True